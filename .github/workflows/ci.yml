name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  test:
    name: Test (Node.js ${{ matrix.node-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18', '20', '22']
        include:
          # Add specific combinations for thorough testing
          - os: ubuntu-latest
            node-version: '20'
            coverage: true
            
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Get pnpm store directory
      shell: bash
      run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Type checking
      run: pnpm run type-check
      
    - name: Linting
      run: pnpm run lint
      
    - name: Format checking
      run: pnpm run format:check
      
    - name: Unit tests
      run: pnpm run test:unit
      
    - name: Integration tests
      run: pnpm run test:integration
      
    - name: Edge case tests
      run: pnpm run test:edge
      
    - name: Full test suite with coverage
      if: matrix.coverage
      run: pnpm run test:ci
      env:
        CI: true
        
    - name: Upload coverage reports
      if: matrix.coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Build project
      run: pnpm run build
      
    - name: Check build output
      run: |
        ls -la dist/
        node dist/cli/index.js --version || true
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-output
        path: dist/
        retention-days: 7

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run quality checks
      run: pnpm run quality
      
    - name: Comment PR with results
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '❌ Quality gate failed. Please check the failed workflow for details.'
          })

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run security audit
      run: pnpm audit --audit-level moderate
      
    - name: Check for vulnerabilities
      run: |
        # Create audit report
        pnpm audit --json > audit-report.json || true
        
        # Check if there are any vulnerabilities
        if [ -s audit-report.json ]; then
          echo "Security vulnerabilities found:"
          cat audit-report.json
          exit 1
        else
          echo "No security vulnerabilities found"
        fi

  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-output
        path: dist/
        
    - name: Performance test
      run: |
        # Test CLI startup time
        echo "Testing CLI startup performance..."
        time node dist/cli/index.js --help
        
        # Test analysis performance with test fixtures
        echo "Testing analysis performance..."
        time node dist/cli/index.js analyze test-fixtures/errors/syntax_error.py --max-files 1 || true
        
        # Memory usage test
        echo "Testing memory usage..."
        /usr/bin/time -v node dist/cli/index.js analyze test-fixtures/errors/ --max-files 5 || true

  compatibility:
    name: Compatibility Test
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Test against different Python versions
      run: |
        # Test with different Python file patterns
        echo "Testing Python 3.8+ features..."
        pnpm run test:edge tests/edge-cases/syntax.test.ts
        
        echo "Testing encoding compatibility..."  
        pnpm run test:edge tests/edge-cases/encoding.test.ts
        
        echo "Testing performance edge cases..."
        pnpm run test:edge tests/edge-cases/performance.test.ts